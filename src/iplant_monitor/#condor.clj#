(ns iplant-monitor.condor
  (:require [clojure.contrib.shell-out :as sh]
	    [clojure.contrib.string :as string]))

(def state-map
     {"0" "Unexpanded"
      "1" "Idle"
      "2" "Running"
      "3" "Removed"
      "4" "Completed"
      "5" "Held"
      "6" "Submission_err"}) 

(def UNEXPANDED "0")
(def IDLE "1")
(def RUNNING "2")
(def REMOVED "3")
(def COMPLETED "4")
(def HELD "5")
(def SUBERR "6")

(defn run-cmd
  [exec-name arg & args]
  (apply sh/sh (concat [exec-name arg] args)))

(defn constraints
  [uuids]
  (flatten
   (map
    (fn [uuid]
      (let [clster (str "IpcUuid==\"" uuid "\"")]
	["-constraint" clster]))
    uuids)))

(defn split-into-jobads
  [all-jobads]
  (string/split #"\n\n" (string/trim all-jobads)))

(defn clean-value
  [val]
  (let [trimmed-val (string/trim val)
	no-preceding-quote (string/replace-re #"^\"" "" trimmed-val)
	no-trailing-quote (string/replace-re #"\"$" "" no-preceding-quote)]
    no-trailing-quote))

(defn parse-jobad
  [jobad]
  (let [lines (string/grep #"^[a-zA-Z\_]" (string/split-lines jobad))
	key-vals (map
		  (fn [line]
		    (let [tokens (string/split #"=" line)
			  key    (first tokens)
			  value  (string/join "=" (rest tokens))]
		      {(string/trim key) (clean-value value)}))
		  lines)]
    (apply merge key-vals)))

(defn parse-all-jobads
  [jobads]
  (map parse-jobad (split-into-jobads jobads)))

(defn- completed-and-succeeded?
  [parsed-jobad]
  (cond
   (contains? parsed-jobad "ExitBySignal")     false
   (not (= "0" (get parsed-jobad "ExitCode"))) false
   :else                                       true))

(defn failed?
  [parsed-jobad]
  (let [status (get parsed-jobad "JobStatus")]



    (cond
     (= status REMOVED)    true
     (= status HELD)       true
     (= status SUBERR)     true
     (= status UNEXPANDED) false
     (= status IDLE)       false
     (= status RUNNING)    false
     (= status COMPLETED)  (completed-and-succeeded? parsed-jobad)
     :else                 true)))

(defn held?
  [parsed-jobad]
  (let [status (get parsed-jobad "JobStatus")]
    (= status HELD)))

(defprotocol CondorProtocol
  (history [this uuids])
  (current [this uuids]))

(defrecord Condor
  [condor_history_path condor_q_path path condor_config]
  CondorProtocol
  
  (history
   [this uuids]
   (let [env {"PATH"          path
	      "CONDOR_CONFIG" condor_config}
	 cmd [:env env condor_history_path "-l"]]
     (apply sh/sh (concat cmd (constraints uuids)))))
  
  (current
   [this uuids]
   (let [env {"PATH"          path
	      "CONDOR_CONFIG" condor_config}
	 cmd [:env env condor_q_path "-l"]]
     (apply sh/sh (concat cmd (constraints uuids))))))